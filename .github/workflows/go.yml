# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: build-metricly

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    # Install dependencies
    - name: Install dependencies
      run: go mod tidy

    # Run static analysis and linters
    - name: Run linters
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.2
        golangci-lint run

    # Run tests
    - name: Run tests
      run: go test ./... -v -coverprofile=coverage.out

    # Upload test coverage
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.out

  docker-build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Metricly Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: quay.io/yadneshk/metricly:latest

      # Step 3: Pull and Run the Metricly container
      - name: Run Metricly container
        run: |
          podman run -d \
            --name metricly \
            -p 8080:8080 \
            -v ./config/config.yaml:/etc/metricly/config.yaml:ro \
            quay.io/yadneshk/metricly:latest
          sleep 20

      # Step 4: Verify metrics are exposed
      - name: Verify metrics endpoint
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/metrics)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Metrics endpoint not reachable"
            exit 1
          fi
          echo "Metrics endpoint is reachable and returned HTTP $RESPONSE"

      # Step 5: Optional - Inspect metrics content
      - name: Fetch and log metrics
        run: |
          RESPONSE=$(curl -s http://localhost:8080/api/v1/metrics)
          if echo "$RESPONSE" | grep -q "metricly_cpu_total"; then
            echo "metricly_cpu_total found!"
          else
            echo "metricly_cpu_total not found!" && exit 1
          fi

          if echo "$RESPONSE" | grep -q "metricly_memory_total_bytes"; then
            echo "metricly_memory_total_bytes Metrics found!"
          else
            echo "metricly_memory_total_bytes not found!" && exit 1
          fi

          if echo "$RESPONSE" | grep -q "metricly_disk_usage_percentage"; then
            echo "metricly_disk_usage_percentage Metrics found!"
          else
            echo "metricly_disk_usage_percentage not found!" && exit 1
          fi

          if echo "$RESPONSE" | grep -q "metricly_network_rx_bytes"; then
            echo "metricly_network_rx_bytes Metrics found!"
          else
            echo "metricly_network_rx_bytes not found!" && exit 1
          fi

      # Step 6: Stop and remove the container
      - name: Clean up container
        run: podman rm -f metricly

  docker-build-push:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay.io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: quay.io/yadneshk/metricly:latest
